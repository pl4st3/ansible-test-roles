#!/bin/bash
#/usr/lib/check_mk_agent/local
export LANG=de_DE.UTF-8

function confline # get first line from file $1 mathing $2, stripped of # and ; comment lines, stripped spaces and tabs down to spaces, remove trailing ;
{
 echo $(cat $1|grep -v '^$\|^\s*\#'|sed -e "s/[[:space:]]\+/ /g"|sed s/^\ //|sed s/\;//|grep -i "$2"|head -n 1)
}

function conflines # get lines from file $1 mathing $2, stripped of # and ; comment lines, stripped spaces and tabs down to spaces, remove trailing ;
{
 echo "$(cat $1|grep -v '^$\|^\s*\#'|sed -e "s/[[:space:]]\+/ /g"|sed s/^\ //|sed s/\;//|grep -i $2)"
}

function ati # ipv4 to longint
{
 ip4=$1; ipno=0
 for (( i=0 ; i<4 ; ++i )); do
   ((ipno+=${ip4%%.*}*$((254**$((3-${i})))))) # .0 .255 should not be counted
   ip4=${ip4#*.}
  done
 echo $ipno
}

# get exspected domains from kea.conf
keaconf="/etc/kea/kea.conf"
domain_ids=($(cat $keaconf|jq -r '.Dhcp4.subnet4 |map(.id)'|grep .[0-9]|tr -d ', '))
domain_v4ranges=($(cat $keaconf|jq -r '.Dhcp4.subnet4 |map(.pools)'|grep pool|cut -d: -f 2|tr -d '" '))
domain_cliifs=($(cat $keaconf|jq -r '.Dhcp4.subnet4 |map(.interface)'|grep '"'|tr -d '", '))
domaincount=0
for domain in "${domain_ids[@]}"; do
  domaincountz=$domaincount
# echo "Domain:$domain cli_if:${domain_cliifs[$domaincount]} iprange:${domain_v4ranges[$domaincount]} "
  ((domaincount++))
 done
# echo Total domains configured:$domaincount $domaincountz

## Batman-Advanced
bat_version=$(batctl -v 2>/dev/null)
bat_adv_v=$(batctl -v 2>/dev/null|cut -d" " -f4|tr -d "]")
bat_ctl_v=$(batctl -v 2>/dev/null|cut -d" " -f2)
batadvequal=2
if [ "$bat_adv_v" == "$bat_ctl_v" ] ; then
  batadvequal=1
 fi

echo "P Batman-Version kernelvsctl=$batadvequal;1:2;0:3 versions:$bat_version"
for b in "${domain_cliifs[@]}"; do
  z=$( batctl -m $b o 2>/dev/null | wc -l )
  if [ $z -ge 1 ]; then
    router=$(($(batctl -m $b o 2>/dev/null|grep "^\ \*"|wc -l)-0 ))
    clients=$(batctl -m $b tg 2>/dev/null| grep "^\ \*"|grep -cEo "\[.*W.*\]+")
    owngw=$(batctl -m $b gw 2>/dev/null|cut -d" " -f1|sed s/server/1/|sed s/off/0/)
    gateways=$(($(batctl -m $b gwl 2>/dev/null|grep -A 999 outgoingIf|grep -v outgoingIf|wc -l ) + $owngw))
    claims=$(batctl -m $b cl 2>/dev/null|wc -l )
#    ips=$(( $(batctl -m $b dc 2>/dev/null |wc -l) - 2))
    wlow=$(( $router * 20 / 100 ))
    clow=$(( $router * 5 / 100 ))
    wlimit=$(( $router * 5 ))
    climit=$(( $router * 10 ))
    echo "P Batman-$b Router=$router.0;5:350;1:500|Clients=$clients.0;$wlow.0:$wlimit.0;$clow.0:$climit.0|Claims=$claims.0;0:9999;0:9999|Gateways=$gateways.0;0:3;0:5";
   fi;
 done

## Fastd
if  [ -x "$(fastd -v 2>/dev/null)" ]; then
  fastd_version=$(fastd -v|cut -d ' ' -f 2);
  echo "0 Fastd_Version Version=$fastd_version; Fastd $fastd_version ";
  fastdp=/etc/fastd
  list=$(ls -F $fastdp|grep /|cut -d '/' -f 1)
  for fasti in $list ; do
    clients=$(nc -U $(cat $fastdp/$fasti/fastd.conf|grep -v '^$\|^\s*\#'|sed -e "s/[[:space:]]\+/ /g"|sed s/^\ //|sed s/\;//|grep -i 'status socket'|cut -d '"' -f 2)|grep '"established"' -o|wc -l);
    interface=$(confline $fastdp/$fasti/fastd.conf interface|cut -d '"' -f 2)
    mtu=$(confline $fastdp/$fasti/fastd.conf mtu|cut -d ' ' -f 2|cut -d ';' -f1)
    port=$(confline $fastdp/$fasti/fastd.conf bind|cut -d ':' -f 2|cut -d ' ' -f1)
    limit=$(confline $fastdp/$fasti/fastd.conf 'peer limit'|cut -d ' ' -f 3|cut -d ';' -f1)
    climit=$(( $limit * 95 / 100 ))
    wlimit=$(( $limit * 90 / 100 ))
    clow=$(( $limit / 100 ))
    wlow=$(( $limit * 5 / 100 ))
    echo "P Fastd_cli_$interface Clients=$clients.0;$wlow:$wlimit;$clow:$climit; Interface:$interface, Port:$port, MTU:$mtu, Peer-Limit:$limit"
   done
 fi


## tunneldigger
tdconfig="/srv/tunneldigger/broker/l2tp_broker_domain"
mintdok=$(( $domaincountz ))
maxtdok=$(( $domaincount +1 ))
tdsum=0
wlow=1
wlimit=200
clow=0
climit=250
for b in "${domain_ids[@]}"; do
  td=$(printf "%.2d\n" $b)
  br="br$td"
  tdcfg="$tdconfig$td.cfg"
  tdactive=$(systemctl is-active tunneldigger@$td.service)
  tdrunning=$(ps ax |grep tunndeligger|grep -v grep|wc -l)
  tdclients=$(brctl show "$br"|grep "l2tp"|wc -l)
  tdstatus=0; [ "$tdactive" == "active" ] && tdstatus=1
  tdsum=$(( $tdsum + $tdstatus))
  mtu=$(confline $tdcfg "^pmtu"|cut -d= -f2|tr -d " ")
  port=$(confline $tdcfg "^port"|cut -d= -f2|tr -d " ")
  echo "P TD_cli_$br Clients=$tdclients.0;$wlow:$wlimit;$clow:$climit Port:$port, MTU:$mtu"
 done
echo "P TD Tunneldiggeractive=$tdsum.0;$mintdok:$maxtdok;$mintdok:$maxtdok";

## kea-dhcp4
keaactive=$(systemctl is-active kea-dhcp4)
kearunning=$(ps ax |grep kea-dhcp4|grep -v grep|wc -l)
keastatus=0; [ "$keaactive" == "active" ] && keastatus=1
echo "P KEA keaactive=$keastatus.0;0:2;0:2 kearunning=$kearunning keaservice=$keaactive";

## postgres
postgresactive=$(systemctl is-active system-postgresql.slice)
postgresrunning=$(ps ax |grep postgres|grep -v grep|wc -l)
postgresstatus=0; [ "$postgresactive" == "active" ] && postgresstatus=1
echo "P Postgres postgresactive=$postgresstatus.0;0:2;0:2|postgresrunning=$postgresrunning.0;6:8;6:8 postgresservice=$postgresactive";

## bind
bindactive=$(systemctl is-active bind9.service)
bindrunning=$(ps ax |grep bind|grep -v grep|wc -l)
bindstatus=0; [ "$bindactive" == "active" ] && bindstatus=1
echo "P Bind9 bindactive=$bindstatus.0;0:2;0:2|bindrunning=$bindrunning.0;0:2;0:2 bindservice=$bindactive";

# BGP-interfaces
interconf=/etc/network/interfaces.d/
tunnel4=$(grep -r "iface tun" $interconf|grep "inet6 static")
tunnel4zahl=$(echo "$tunnel4"|wc -l)
tunnel4up=0
while read -r line; do
  remote=$(echo $line|cut -d" " -f2)
  state=$(ip link|grep $remote|wc -l)
  if [ $state -eq 1 ]; then
    tunnel4up=$(( $tunnel4up + 1 ))
    tunnel4st="UP"
   else
    tunnel4st="DOWN"
   fi
  mtu=$(ip link|grep $remote|cut -d" " -f5)
  echo "P Tun4_$remote link4-$remote=$state.0;0:2;0:2; link-$remote:$tunnel4st mtu:$mtu"
 done <<< "$tunnel4"

tunnel6=$(grep -r "iface tun" $interconf|grep "inet6 static")
tunnel6zahl=$(echo "$tunnel6"|wc -l)
tunnel6up=0
while read -r line; do
  remote=$(echo $line|cut -d" " -f2)
  state=$(ip link|grep $remote|wc -l)
  if [ $state -eq 1 ]; then
    tunnel6up=$(( $tunnel6up + 1 ))
    tunnel6st="UP"
   else
    tunnel6st="DOWN"
   fi
  mtu=$(ip link|grep $remote|cut -d" " -f5)
  echo "P Tun6_$remote link6-$remote=$state.0;0:2;0:2; link-$remote:$tunnel6st mtu:$mtu"
 done <<< "$tunnel6"


tunnelzahl=$(( $tunnel4zahl + $tunnel6zahl ))
tunnelup=$(( $tunnel4up + $tunnel6up ))
wlow=$(( $tunnelzahl -1 ))
clow=$(( $tunnelzahl -2 ))
wlimit=$(( $tunnelzahl +1 ))
climit=$(( $tunnelzahl +1 ))
echo "P Tunlinks Tunnel-Up=$tunnelup.0;$wlow:$wlimit;$clow:$climit|Tunnel-Configured=$tunnelzahl.0 Tunnel-Configured:$tunnelzahl Tunnel-Up:$tunnelup"

## Bird4
bird4conf=/etc/bird/bird.conf
bird4=$(conflines $bird4conf protocol|grep -i " bgp")
bird4confzahl=$(echo "$bird4"|wc -l)
bird4confzahlu=$(( bird4confzahl +1 ))
bird4loaded=0
bird4up=0
bird4imported=0
bird4exported=0
wlow=$(( $bird4confzahl ))
clow=$(( $bird4confzahl * 10 / 20 + 1 ))
wlimit=$(( $bird4confzahl + 1 ))
climit=$(( $bird4confzahl + 1 ))
TFILE="/tmp/$(basename $0).$$.tmp"
birdc s p>$TFILE
while read line; do
  line=$(echo $line|sed -e "s/[[:space:]]\+/ /g"|sed s/^\ //|sed s/\;//)
  if [ $(echo $line|cut -d" " -f2) = "BGP" ] ; then
    bird4loaded=$(( $bird4loaded + 1))
    remote=$(echo $line|cut -d" " -f1)
    link=$(echo $line|cut -d" " -f4)
    since=$(echo $line|cut -d" " -f5)
    linkstate=$(echo $line|cut -d" " -f6)
    linkok=0
    if [ $linkstate = "Established" ] ; then
      linkok=1;
      birdlink="UP"
      bird4up=$(( $bird4up + 1 ))
     else
      birdlink="DOWN"
     fi
     TFILE2="/tmp/$(basename $0).$$$.tmp"
     birdc s p all $remote>$TFILE2
     preference=$(confline $TFILE2 Preference:|cut -d" " -f2)
     routes=$(confline $TFILE2 Routes:)
     imported=$(echo $routes|cut -d" " -f2-3|grep -i "imported"|cut -d" " -f1)
     bird4imported=$(( $bird4imported + $imported ))
     exported=$(echo $routes|cut -d" " -f4-5|grep -i "exported"|cut -d" " -f1)
     bird4exported=$(( $bird4exported + $exported ))
     preferred=$(echo $routes|cut -d" " -f6-7|grep -i "preferred"|cut -d" " -f1)
     ImportUp=$(confline $TFILE2 "Import")
     ImpUpAcp=$(echo $routes|cut -d" " -f6)
     ImportUp=$(confline $TFILE2 "Import withdraws:")
     ImpUpWit=$(echo $routes|cut -d" " -f6)
     ExportUp=$(confline $TFILE2 "Export updates:")
     ExpUpAcp=$(echo $routes|cut -d" " -f6)
     ExportUp=$(confline $TFILE2 "Export withdraws:")
     ExpUpWit=$(echo $routes|cut -d" " -f6)
     rm $TFILE2
    echo "P Bird4-$remote Bird4-$remote=$linkok.0;0.1:2;0:2 linkstate:$linkstate since:$since preference:$preference preferred:$preferred imported:$imported exported:$exported ImpUpAcp:$ImpUpAcp ImpUpWit:$ImpUpWit ExpUpAcp:$ExpUpAcp ExUpWit:$ExpUpWit"
   fi
 done<$TFILE
rm $TFILE
echo "P Bird4links bird4-Up=$bird4up.0;$wlow:$wlimit;$clow:$climit|Bird4-Configured=$bird4confzahl.0|Bird4-Loaded=$bird4loaded.0;$bird4confzahl:$bird4confzahlu;$bird4confzahl:$bird4confzahlu|Bird4Imported=$bird4imported.0|Bird4Exported=$bird4exported.0 Up:$bird4up Configured:$bird4confzahl Loaded:$bird4loaded Imported:$bird4imported Exported:$bird4exported"

## Bird6
bird6conf=/etc/bird/bird6.conf
bird6=$(conflines $bird6conf protocol|grep -i " bgp")
bird6confzahl=$(echo "$bird6"|wc -l)
bird6confzahlu=$(( bird6confzahl +1 ))
bird6loaded=0
bird6up=0
bird6imported=0
bird6exported=0
wlow=$(( $bird6confzahl ))
clow=$(( $bird6confzahl * 10 / 20 + 1 ))
wlimit=$(( $bird6confzahl +1 ))
climit=$(( $bird6confzahl +1 ))
TFILE="/tmp/$(basename $0).$$.tmp"
birdc6 s p>$TFILE
while read line; do
  line=$(echo $line|sed -e "s/[[:space:]]\+/ /g"|sed s/^\ //|sed s/\;//)
  if [ $(echo $line|cut -d" " -f2) = "BGP" ] ; then
    bird6loaded=$(( $bird6loaded + 1))
    remote=$(echo $line|cut -d" " -f1)
    link=$(echo $line|cut -d" " -f4)
    since=$(echo $line|cut -d" " -f5)
    linkstate=$(echo $line|cut -d" " -f6)
    linkok=0
    if [ $linkstate = "Established" ] ; then
      linkok=1;
      birdlink="UP"
      bird6up=$(( $bird6up + 1 ))
     else
      birdlink="DOWN"
     fi
     TFILE2="/tmp/$(basename $0).$$$.tmp"
     birdc6 s p all $remote>$TFILE2
     preference=$(confline $TFILE2 Preference:|cut -d" " -f2)
     routes=$(confline $TFILE2 Routes:)
     imported=$(echo $routes|cut -d" " -f2-3|grep -i "imported"|cut -d" " -f1)
     bird6imported=$(( $bird6imported + $imported ))
     exported=$(echo $routes|cut -d" " -f4-5|grep -i "exported"|cut -d" " -f1)
     bird6exported=$(( $bird6exported + $exported ))
     preferred=$(echo $routes|cut -d" " -f6-7|grep -i "preferred"|cut -d" " -f1)
     ImportUp=$(confline $TFILE2 "Import")
     ImpUpAcp=$(echo $routes|cut -d" " -f6)
     ImportUp=$(confline $TFILE2 "Import withdraws:")
     ImpUpWit=$(echo $routes|cut -d" " -f6)
     ExportUp=$(confline $TFILE2 "Export updates:")
     ExpUpAcp=$(echo $routes|cut -d" " -f6)
     ExportUp=$(confline $TFILE2 "Export withdraws:")
     ExpUpWit=$(echo $routes|cut -d" " -f6)
     rm $TFILE2
    echo "P Bird6-$remote Bird6-$remote=$linkok.0;0.1:2;0:2 linkstate:$linkstate since:$since preference:$preference preferred:$preferred imported:$imported exported:$exported ImpUpAcp:$ImpUpAcp ImpUpWit:$ImpUpWit ExpUpAcp:$ExpUpAcp ExUpWit:$ExpUpWit"
   fi
 done<$TFILE
rm $TFILE
echo "P Bird6links bird6-Up=$bird6up.0;$wlow:$wlimit;$clow:$climit|Bird6-Configured=$bird6confzahl.0|Bird6-Loaded=$bird6loaded.0;$bird6confzahl:$bird6confzahlu;$bird6confzahl:$bird6confzahlu|Bird6Imported=$bird6imported.0|Bird6Exported=$bird6exported.0 Up:$bird6up Configured:$bird6confzahl Loaded:$bird6loaded Imported:$bird6imported Exported:$bird6exported"

## Conntrack
conntrack=$(conntrack -C);
conntrack_limit=$(sysctl -a 2>/dev/null |grep net.nf_conntrack_max|cut -d ' ' -f 3);
conntrack_remain=$(echo $conntrack_limit - $conntrack|bc)
wlow=5.0
clow=0.0
wlimit=$(echo "r=$conntrack_limit*0.7;r/1"|bc)
climit=$(echo "r=$conntrack_limit*0.9;r/1"|bc)
wrlimit=$(echo "r=$conntrack_limit*0.3;r/1"|bc)
crlimit=$(echo "r=$conntrack_limit*0.1;r/1"|bc)
echo "P Conntrack conntrack=$conntrack.0;$wlow:$wlimit;$clow:$climit|conntrack_remain=$conntrack_remain.0;$wrlimit:$conntrack_limit;$crlimit:$conntrack_limit Conntrack:$conntrack Conntrack-Remain:$conntrack_remain Conntrack-Limit:$conntrack_limit"
